* create basic family listing view and family show view
    with ability to drill down to see parents and students
    DONE

* Add ability to create Parent and Students as children of family
  DONE

* Add assets related to bootstrap based on sample postit project.
  DONE

* flesh out contacts and tie in contacts to parents
  DONE

* flesh out address and tie in to parents
  DONE

* create "class" model
* relate students to class
* create teacher model
* relate teacher to class

* publish project to Heroku

* "filtered" functionality on various index pages to allow filtering of long lists?
* pagination of long lists like parents, families, teachers, students


* implement restriction that contact info is only visible to users who have children in common with parents/teachers in the class.  So if you are user X and you have a child in classes A and B then you can only see contact info for parents with students also in classes A and B...

* various search screens to implement:
  Search for teacher
  Search for student
  Search for family
  Search for parent

* User Management: design how user accounts/logins relate to models
  * is a user associated with a parent?  a teacher?
      concept of primary "owner" of an account?
      each family has an "administrator" who can change settings for that family.  And delegate administrator ability to others(?)

* Address: edit/new: validate address entry (zipcode must be a number)
* Address: edit/new: selection of state must be via a popdown

* announcements
* events?
* messages (that can be sent to families within class, to teachers)



http://www.tutorialrepublic.com/twitter-bootstrap-2.3.2-tutorial/bootstrap-icons.php

* Visual Cleanup (styling, make more stuff into tables; change fonts)

------
blog about has_many, through using ":uniq => true"